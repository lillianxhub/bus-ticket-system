@startuml Bus Ticket Reservation System

skinparam {
  backgroundColor white
  handwritten false
  monochrome false
  classAttributeIconSize 0
  linetype ortho
}

!define PRIMARY_COLOR 3498DB
!define SECONDARY_COLOR 2ECC71
!define DATABASE_COLOR F1C40F
!define CONTROLLER_COLOR 9B59B6
!define UTILS_COLOR E74C3C
!define SERVICE_COLOR E67E22

package "com.busticket.config" {
    class DatabaseConnection <<Singleton>> #DATABASE_COLOR {
        - {static} JDBC_URL : String
        - {static} USERNAME : String
        - {static} PASSWORD : String
        - {static} connection : Connection

        - DatabaseConnection()
        + {static} getConnection() : Connection
        + {static} closeConnection() : void
    }

    note top of DatabaseConnection
        Singleton pattern for database connection management
    end note
}

package "com.busticket.models" #PRIMARY_COLOR {
    class Booking {
        - bookingId: Integer
        - userId: Integer
        - scheduleId: Integer
        - seatId: Integer
        - travelDate: LocalDate
        - bookingDate: LocalDateTime
        - totalFare: BigDecimal
        - status: String
        - bus: Bus
        - schedule: Schedule
        - bookedSeats: int

        + Booking()
        + Booking(userId: Integer, scheduleId: Integer, seatId: Integer, travelDate: LocalDate, totalFare: BigDecimal)
        .. getters/setters ..
        + getBookingId(): Integer
        + setBookingId(bookingId: Integer): void
        + toString(): String
    }

    class Bus {
        - busId: Integer
        - busName: String
        - busType: BusType

        + Bus()
        + Bus(busId: Integer, busName: String, busType: BusType)
        .. getters/setters ..
        + toString(): String
    }

    enum BusType {
        GOLD_CLASS
        FIRST_CLASS
    }

    class Schedule {
        - scheduleId: Integer
        - busId: Integer
        - origin: String
        - destination: String
        - departureTime: LocalTime
        - arrivalTime: LocalTime
        - fare: BigDecimal

        + Schedule()
        .. getters/setters ..
    }

    class User {
        - userId: Integer
        - username: String
        - password: String
        - email: String
        - fullName: String
        - phone: String
        - address: String
        - role: UserRole
        - createdAt: LocalDateTime
        - active: boolean

        + User()
        .. getters/setters ..
    }

    enum UserRole {
        ADMIN
        CUSTOMER
    }

    class Seat {
        - seatId: Integer
        - seatCode: String
        - busId: Integer
        - seatType: String
        - isAvailable: boolean

        + Seat()
        + Seat(seatId: Integer, seatCode: String, busId: Integer, seatType: String)
        .. getters/setters ..
        + getSeatId(): Integer
        + setSeatId(seatId: Integer): void
        + getSeatCode(): String
        + setSeatCode(seatCode: String): void
        + getBusId(): Integer
        + setBusId(busId: Integer): void
        + getSeatType(): String
        + setSeatType(seatType: String): void
        + isAvailable(): boolean
        + setAvailable(available: boolean): void
        + toString(): String
    }
}

package "com.busticket.dao" #SECONDARY_COLOR {
    interface DAO<T> {
        + save(entity: T): boolean
        + update(entity: T): boolean
        + delete(id: int): boolean
        + findById(id: int): Optional<T>
        + findAll(): List<T>
    }

    class BookingDAO {
        - connection : Connection
        + BookingDAO()
        + createBooking(Booking booking) : Booking
        + findById(Integer bookingId) : Booking
        + findByUserId(Integer userId) : List<Booking>
        - mapResultSetToBooking(ResultSet rs) : Booking
    }

    class UserDAO {
        - connection : Connection
        + UserDAO()
        + save(user : User) : boolean
        + update(user : User) : boolean
        + delete(id : int) : boolean
        + findById(id : int) : Optional<User>
        + findByUsername(username : String) : Optional<User>
        + findByEmail(email : String) : Optional<User>
        + findAll() : List<User>
        + isUsernameExists(username : String) : boolean
        + isEmailExists(email : String) : boolean
        - mapResultSetToUser(rs : ResultSet) : User
    }

    class ScheduleDAO {
        - connection : Connection
        + ScheduleDAO()
        + searchSchedules(String from, String to, LocalDate date, String busType) : List<Booking>
        + getLocations() : List<String>
        - mapResultSetToSchedule(ResultSet rs) : Booking
    }

    class SeatDAO {
        - connection : Connection
        + SeatDAO()
        + findBySeatId(int seatId) : int
        + findBySeatCode(String seatCode) : String
        + getSeatIdByCode(String seatCode) : int
        + checkSeat(int scheduleId, int seatId, LocalDate travelDate) : boolean
        + getAvailableSeats(int scheduleId, LocalDate travelDate) : List<Seat>
        + getAllSeatsByBusId(int busId) : List<Seat>
        - mapResultSetToSeat(ResultSet rs) : Seat
    }
}

package "com.busticket.services" #SERVICE_COLOR {
    class BookingService {
        - bookingDAO : BookingDAO
        + BookingService()
        + createBooking(Booking booking) : Booking
        + getBookingById(Integer bookingId) : Booking
        + getUserBookings(Integer userId) : List<Booking>
    }

    class ScheduleService {
        - scheduleDAO : ScheduleDAO
        + ScheduleService()
        + searchAvailableSchedules(String from, String to, LocalDate date, String busType) : List<Booking>
        + getAllLocations() : List<String>
    }

    class SeatService {
        - seatDAO : SeatDAO
        + SeatService()
        + getSeatCodeByID(String seatCode) : int
        + isSeatAvailable(int scheduleId, int seatId, LocalDate travelDate) : boolean
    }

    class AuthService {
        - userDAO : UserDAO
        + AuthService()
        + register(String username, String password, String email, String fullName, String phone, String address, String role) : boolean
        + login(String username, String password) : Optional<User>
    }
}

package "com.busticket.controllers" #CONTROLLER_COLOR {
    class AuthController implements Initializable {
        - loginPane: AnchorPane
        - registerPane: AnchorPane
        - loginUsername: TextField
        - loginPassword: PasswordField
        - loginButton: Button
        - registerLink: Hyperlink
        - regUsername: TextField
        - regPassword: PasswordField
        - regConfirmPassword: PasswordField
        - regEmail: TextField
        - regFullName: TextField
        - regPhone: TextField
        - regAddress: TextArea
        - registerButton: Button
        - loginLink: Hyperlink
        - authService: AuthService

        + AuthController()
        + initialize(url: URL, resourceBundle: ResourceBundle): void
        + showLoginForm(): void
        + showRegisterForm(): void
        - handleLogin(event: ActionEvent): void
        - handleRegister(event: ActionEvent): void
    }

    class BookingController {
        - bookingPane: AnchorPane
        - fromLocation: ComboBox<String>
        - toLocation: ComboBox<String>
        - travelDate: DatePicker
        - busType: ComboBox<String>
        - busScheduleTable: TableView<Booking>
        - scheduleColumn: TableColumn<Booking, Integer>
        - busNameColumn: TableColumn<Booking, String>
        - departureColumn: TableColumn<Booking, String>
        - arrivalColumn: TableColumn<Booking, String>
        - typeColumn: TableColumn<Booking, String>
        - fareColumn: TableColumn<Booking, BigDecimal>
        - scheduleService: ScheduleService

        + initialize(): void
        - setupComboBoxes(): void
        - setupTable(): void
        - handleSearch(): void
        - handleSeatSelection(): void
        - handleBack(): void
        + getBookingPane(): AnchorPane
        + setBookingPane(bookingPane: AnchorPane): void
    }

    class SeatSelectionController {
        - SeatSelectionPane: AnchorPane
        - seatingGrid: GridPane
        - busNameLabel: Label
        - dateLabel: Label
        - selectedSeatsListView: ListView<String>
        - totalAmountLabel: Label
        - bookingService: BookingService
        - seatService: SeatService
        - selectedSeats: ObservableList<String>
        - selectedSeatsSet: Set<String>

        + SeatSelectionController()
        + initialize(): void
        - updateSeatAvailability(scheduleID: Integer, travelDate: LocalDate): void
        + handleBack(actionEvent: ActionEvent): void
        + handleSubmit(actionEvent: ActionEvent): void
        + HandleSelect(mouseEvent: MouseEvent): void
    }

    class TicketViewController {
        - bookingIdLabel: Label
        - passengerLabel: Label
        - fromLabel: Label
        - toLabel: Label
        - dateLabel: Label
        - busLabel: Label
        - seatLabel: Label
        - amountLabel: Label
        - alertHelper: AlertHelper

        + TicketViewController()
        + initialize(): void
        + handleBack(): void
    }
}


package "com.busticket.utils" #UTILS_COLOR {
    class AlertHelper {
        + showError(message: String): void
        + showInfo(message: String): void
        + showConfirmation(message: String): boolean
    }

    class SceneManager {
        - {static} primaryStage : Stage
        - {static} sessionData : Map<String, Object>

        - SceneManager()
        + {static} switchScene(String : fxmlPath, Object : controller): void
        + {static} setSessionData(String : key, Object : value) : void
        + {static} getSessionData(String : key) : Object
    }

    class ValidationUtils {
        - {static} EMAIL_PATTERN: Pattern
        - {static} USERNAME_PATTERN: Pattern
        - {static} PASSWORD_PATTERN: Pattern
        - {static} PHONE_PATTERN: Pattern
        - ValidationUtils()
        + {static} isValidEmail(email: String): boolean
        + {static} isValidUsername(username: String): boolean
        + {static} isValidPassword(password: String): boolean
        + {static} isValidPhone(phone: String): boolean
        + {static} isNumeric(str: String): boolean
        + {static} isInteger(str: String): boolean
        + {static} isPositiveNumber(str: String): boolean
        + {static} isPositiveInteger(str: String): boolean
        + {static} validateBooking(booking: Booking): void
    }

    class PasswordUtils {
        + {static} hashPassword(password: String): String
        + {static} checkPassword(password: String, hashedPassword: String): boolean
    }
}

' Relationships
DatabaseConnection <-- BookingDAO: uses
DatabaseConnection <-- UserDAO: uses
DatabaseConnection <-- ScheduleDAO: uses
DatabaseConnection <-- SeatDAO: uses

DAO <|.. UserDAO
DAO <|.. BookingDAO

' Service to DAO relationships
BookingService --> "1" BookingDAO: uses
ScheduleService --> "1" ScheduleDAO: uses
SeatService --> "1" SeatDAO: uses
AuthService --> "1" UserDAO: uses

' Controller to Service relationships
AuthController --> "1" AuthService: uses
BookingController --> "1" BookingService: uses
BookingController --> "1" ScheduleService: uses
BookingController --> "1" SeatService: uses
SeatSelectionController --> "1" SeatService: uses
TicketViewController --> "1" BookingService: uses

' Controller to Utilities relationships
AuthController --> ValidationUtils: uses
AuthController --> AlertHelper: uses
AuthController --> SceneManager: uses
BookingController --> AlertHelper: uses
BookingController --> SceneManager: uses
SeatSelectionController --> AlertHelper: uses
SeatSelectionController --> SceneManager: uses
TicketViewController --> AlertHelper: uses
TicketViewController --> SceneManager: uses


' Service to Utilities
BookingService --> ValidationUtils: uses
AuthService --> PasswordUtils: uses

User "1" *-- "1" UserRole: has
Booking "1" --> "1" Bus: contains
Booking "1" --> "1" Schedule: references
Booking "1" --> "1" Seat: references
Bus "1" *-- "1" BusType: has
Bus "1" --> "*" Seat: contains

' Service for Models mapping
BookingService --> Booking: manages
ScheduleService --> Schedule: manages
SeatService --> Seat: manages
AuthService --> User: manages

ValidationUtils ..> Booking: validates

@enduml